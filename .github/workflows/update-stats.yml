
# name: Update GitHub Stats
# on:
#   schedule:
#     - cron: '0 0 * * *'
#   workflow_dispatch:
#   push:
#     branches: [ main, master ]

# jobs:
#   update-readme:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0

#     - name: Generate Snake Game
#       uses: Platane/snk@v3
#       with:
#         github_user_name: ${{ github.repository_owner }}
#         outputs: |
#           dist/github-contribution-grid-snake.svg
#           dist/github-contribution-grid-snake-dark.svg?palette=github-dark

#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '18'

#     - name: Update README with fresh timestamps
#       run: |
#         # Generate new timestamp
#         TIMESTAMP=$(date +%s%3N)
#         echo "Using timestamp: $TIMESTAMP"
        
#         # Update all cache_bust parameters in README
#         sed -i "s/cache_bust=[0-9]\+/cache_bust=$TIMESTAMP/g" README.md
        
#         echo "‚úÖ Updated all GitHub stats URLs with fresh timestamp"

#     - name: Commit and push changes
#       uses: stefanzweifel/git-auto-commit-action@v5
#       with:
#         commit_message: 'üîÑ Auto-update GitHub stats [skip ci]'
#         commit_user_name: 'github-actions[bot]'
#         commit_user_email: 'github-actions[bot]@users.noreply.github.com'
#         skip_dirty_check: false
#         skip_fetch: false
#         skip_checkout: false

# name: Update GitHub Stats
# on:
#   schedule:
#     - cron: '0 0 * * *'
#   workflow_dispatch:
#   push:
#     branches: [ main, master ]

# jobs:
#   update-readme:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v4
#       with:
#         token: ${{ secrets.GH_TOKEN }}
#         fetch-depth: 0

#     - name: Configure Git
#       run: |
#         git config --global user.name "github-actions[bot]"
#         git config --global user.email "github-actions[bot]@users.noreply.github.com"

#     - name: Sync with remote
#       run: |
#         echo "üîÑ Syncing with remote repository..."
#         git fetch origin
#         git reset --hard origin/main
#         echo "‚úÖ Successfully synced with remote"

#     - name: Generate Snake Game
#       uses: Platane/snk@v3
#       with:
#         github_user_name: ${{ github.repository_owner }}
#         outputs: |
#           dist/github-contribution-grid-snake.svg
#           dist/github-contribution-grid-snake-dark.svg?palette=github-dark
#         github_token: ${{ secrets.GH_TOKEN }}

#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '18'

#     - name: Update README with fresh timestamps
#       run: |
#         # Generate new timestamp
#         TIMESTAMP=$(date +%s%3N)
#         echo "Using timestamp: $TIMESTAMP"
        
#         # Clear GitHub Stats API cache with multiple requests
#         echo "üîÑ Clearing API cache..."
#         for i in {1..5}; do
#           curl -s "https://github-readme-stats.vercel.app/api?username=Entue250&count_private=true&include_all_commits=true&cache_bust=$((TIMESTAMP + i))" > /dev/null &
#         done
#         wait
        
#         # Update all cache_bust parameters in README
#         sed -i "s/cache_bust=[0-9]\+/cache_bust=$TIMESTAMP/g" README.md
        
#         echo "‚úÖ Updated all GitHub stats URLs with fresh timestamp: $TIMESTAMP"

#     - name: Verify Token Access
#       run: |
#         echo "üîç Testing GitHub API access..."
#         curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
#              -H "Accept: application/vnd.github.v3+json" \
#              -s https://api.github.com/user | jq -r '.login + " - Public repos: " + (.public_repos|tostring)' || echo "Token check completed"

#     - name: Check for changes and commit
#       run: |
#         # Check if there are any changes
#         if git diff --quiet; then
#           echo "No changes detected, skipping commit"
#           exit 0
#         fi
        
#         # Stage changes
#         git add .
        
#         # Check again after staging
#         if git diff --cached --quiet; then
#           echo "No staged changes, skipping commit"
#           exit 0
#         fi
        
#         # Commit changes
#         git commit -m "üîÑ Auto-update GitHub stats [skip ci]"
        
#         # Push changes with retry logic
#         for i in {1..3}; do
#           echo "Attempt $i: Pushing changes..."
#           if git push origin main; then
#             echo "‚úÖ Successfully pushed changes"
#             exit 0
#           else
#             echo "‚ùå Push failed, syncing and retrying..."
#             git fetch origin
#             git rebase origin/main
#             if [ $i -eq 3 ]; then
#               echo "‚ùå Failed to push after 3 attempts"
#               exit 1
#             fi
#             sleep 5
#           fi
#         done

name: Generate Custom Stats from GitHub API
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  generate-custom-stats:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}

    - name: Generate Custom Stats Badge
      run: |
        cat > generate_stats.js << 'EOF'
        const https = require('https');
        const fs = require('fs');

        function apiRequest(path) {
          return new Promise((resolve, reject) => {
            const options = {
              hostname: 'api.github.com',
              path: path,
              headers: {
                'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                'User-Agent': 'GitHub-Stats-Bot',
                'Accept': 'application/vnd.github.v3+json'
              }
            };

            https.get(options, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                if (res.statusCode === 200) {
                  resolve(JSON.parse(data));
                } else {
                  reject(new Error(`API Error: ${res.statusCode}`));
                }
              });
            }).on('error', reject);
          });
        }

        async function getCommitStats() {
          try {
            // Get user info
            const user = await apiRequest('/user');
            console.log(`üìä User: ${user.login}`);
            console.log(`üìÅ Public repos: ${user.public_repos}`);
            console.log(`üîí Private repos: ${user.total_private_repos}`);

            // Get all repositories (public + private)
            const repos = await apiRequest('/user/repos?type=all&per_page=100&sort=updated');
            console.log(`üìö Total accessible repos: ${repos.length}`);

            // Count commits in recent repositories
            let totalCommits = 0;
            let reposChecked = 0;
            const currentYear = new Date().getFullYear();

            for (const repo of repos.slice(0, 30)) { // Check top 30 repos
              try {
                const commits = await apiRequest(`/repos/${user.login}/${repo.name}/commits?author=${user.login}&since=${currentYear}-01-01T00:00:00Z&per_page=100`);
                
                if (commits && Array.isArray(commits)) {
                  totalCommits += commits.length;
                  console.log(`üìù ${repo.name}: ${commits.length} commits (${repo.private ? 'private' : 'public'})`);
                }
                reposChecked++;
                
                // Rate limiting delay
                await new Promise(resolve => setTimeout(resolve, 100));
              } catch (error) {
                console.log(`‚ö†Ô∏è  Skipped ${repo.name}: ${error.message}`);
              }
            }

            console.log(`\nüéØ RESULTS:`);
            console.log(`Total commits in ${currentYear}: ${totalCommits}`);
            console.log(`Repositories checked: ${reposChecked}/${repos.length}`);

            // Update README with custom stats
            let readme = fs.readFileSync('README.md', 'utf8');
            
            // Generate dynamic stats badge
            const statsUrl = `https://img.shields.io/badge/Total%20Commits%20${currentYear}-${totalCommits}-brightgreen?style=for-the-badge&logo=github`;
            
            // Add or update custom stats section
            const customStatsSection = `\n<!-- Custom Commit Count -->\n<div align="center">\n  <img src="${statsUrl}" alt="Total Commits ${currentYear}" />\n  <p><em>Includes commits from ${reposChecked} repositories (public + private)</em></p>\n</div>\n<!-- End Custom Stats -->\n`;
            
            if (readme.includes('<!-- Custom Commit Count -->')) {
              readme = readme.replace(/<!-- Custom Commit Count -->[\s\S]*?<!-- End Custom Stats -->/g, customStatsSection.trim());
            } else {
              // Add after the GitHub Stats section
              const statsHeader = '<h2 align="center">üìä GitHub Stats</h2>';
              if (readme.includes(statsHeader)) {
                readme = readme.replace(statsHeader, statsHeader + customStatsSection);
              }
            }

            // Update regular stats cache
            const timestamp = Date.now();
            readme = readme.replace(/cache_bust=\d+/g, `cache_bust=${timestamp}`);

            fs.writeFileSync('README.md', readme);
            console.log('‚úÖ README updated with custom commit count');

          } catch (error) {
            console.error('‚ùå Error generating stats:', error);
            process.exit(1);
          }
        }

        getCommitStats();
        EOF

        node generate_stats.js
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Commit and push
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if ! git diff --quiet; then
          git add .
          git commit -m "üìä Add custom commit statistics including private repos [skip ci]"
          git push
          echo "‚úÖ Updated with custom commit statistics"
        else
          echo "No changes to commit"
        fi
