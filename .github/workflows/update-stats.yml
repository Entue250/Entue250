
# name: Update GitHub Stats
# on:
#   schedule:
#     - cron: '0 0 * * *'
#   workflow_dispatch:
#   push:
#     branches: [ main, master ]

# jobs:
#   update-readme:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0

#     - name: Generate Snake Game
#       uses: Platane/snk@v3
#       with:
#         github_user_name: ${{ github.repository_owner }}
#         outputs: |
#           dist/github-contribution-grid-snake.svg
#           dist/github-contribution-grid-snake-dark.svg?palette=github-dark

#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '18'

#     - name: Update README with fresh timestamps
#       run: |
#         # Generate new timestamp
#         TIMESTAMP=$(date +%s%3N)
#         echo "Using timestamp: $TIMESTAMP"
        
#         # Update all cache_bust parameters in README
#         sed -i "s/cache_bust=[0-9]\+/cache_bust=$TIMESTAMP/g" README.md
        
#         echo "‚úÖ Updated all GitHub stats URLs with fresh timestamp"

#     - name: Commit and push changes
#       uses: stefanzweifel/git-auto-commit-action@v5
#       with:
#         commit_message: 'üîÑ Auto-update GitHub stats [skip ci]'
#         commit_user_name: 'github-actions[bot]'
#         commit_user_email: 'github-actions[bot]@users.noreply.github.com'
#         skip_dirty_check: false
#         skip_fetch: false
#         skip_checkout: false

name: Update GitHub Stats
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  update-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Sync with remote
      run: |
        echo "üîÑ Syncing with remote repository..."
        git fetch origin
        git reset --hard origin/main
        echo "‚úÖ Successfully synced with remote"

    - name: Generate Snake Game
      uses: Platane/snk@v3
      with:
        github_user_name: ${{ github.repository_owner }}
        outputs: |
          dist/github-contribution-grid-snake.svg
          dist/github-contribution-grid-snake-dark.svg?palette=github-dark
        github_token: ${{ secrets.GH_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Update README with fresh timestamps
      run: |
        # Generate new timestamp
        TIMESTAMP=$(date +%s%3N)
        echo "Using timestamp: $TIMESTAMP"
        
        # Clear GitHub Stats API cache with multiple requests
        echo "üîÑ Clearing API cache..."
        for i in {1..5}; do
          curl -s "https://github-readme-stats.vercel.app/api?username=Entue250&count_private=true&include_all_commits=true&cache_bust=$((TIMESTAMP + i))" > /dev/null &
        done
        wait
        
        # Update all cache_bust parameters in README
        sed -i "s/cache_bust=[0-9]\+/cache_bust=$TIMESTAMP/g" README.md
        
        echo "‚úÖ Updated all GitHub stats URLs with fresh timestamp: $TIMESTAMP"

    - name: Verify Token Access
      run: |
        echo "üîç Testing GitHub API access..."
        curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
             -H "Accept: application/vnd.github.v3+json" \
             -s https://api.github.com/user | jq -r '.login + " - Public repos: " + (.public_repos|tostring)' || echo "Token check completed"

    - name: Check for changes and commit
      run: |
        # Check if there are any changes
        if git diff --quiet; then
          echo "No changes detected, skipping commit"
          exit 0
        fi
        
        # Stage changes
        git add .
        
        # Check again after staging
        if git diff --cached --quiet; then
          echo "No staged changes, skipping commit"
          exit 0
        fi
        
        # Commit changes
        git commit -m "üîÑ Auto-update GitHub stats [skip ci]"
        
        # Push changes with retry logic
        for i in {1..3}; do
          echo "Attempt $i: Pushing changes..."
          if git push origin main; then
            echo "‚úÖ Successfully pushed changes"
            exit 0
          else
            echo "‚ùå Push failed, syncing and retrying..."
            git fetch origin
            git rebase origin/main
            if [ $i -eq 3 ]; then
              echo "‚ùå Failed to push after 3 attempts"
              exit 1
            fi
            sleep 5
          fi
        done
